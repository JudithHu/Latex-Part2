% obrdr.mp, generated by Mfpic, v0.9 2006/05/26,
% from TeX source "in-mat" on 2009/08/26 at 14:36
numeric mfpicversion; mfpicversion:=90;
if unknown mode: mode = localfont; fi
if unknown mag: mag = 1000/1000; fi
if unknown grafbase: input grafbase; fi

if unknown grafbaseversion: grafbaseversion = 0; fi
if grafbaseversion <> mfpicversion :
GBmsg "Bad mfpic installation: mfpic and grafbase versions do not match.";
fi

if unknown Apricot: input dvipsnam.mp; fi
verbatimtex
\gdef \mpxshipout {\afterassignment \middlempxshipout \setbox 0=\hbox }%
\gdef \middlempxshipout {\aftergroup \finishmpxshipout }%
\gdef \finishmpxshipout {\dimen 1=\ht 0 \dimen 2=\dp 0
\dimen 0=\dimen 1 \advance \dimen 0\dimen 2
\setbox 0=\hbox {\hbox {\box 0
\ifnum \dimen 0>0 \vrule width1sp height\dimen 1 depth\dimen 2
\else \vrule width1sp height1sp depth0sp\relax 
\fi }}%
\ht 0=0pt \dp 0=0pt \shipout \hbox {\box 0}}%
\def \MFPtext #1{\vbox {\def \\{\cr }\MFPcfont \everylabel 
\halign {##\hfil \cr #1\crcr }}}%

\def \everylabel {}
etex;

setvariable (boolean) (clipall) true;
setvariable (numeric) (label_sep) 3.0pt;
setvariable (numeric) (labelpath_sep) 3.0pt;
path p,q;color rust;
pr:=0.2;
delka:=0.1; krok:=0.2; pocet:=2;

save funkcef;
vardef funkcef (expr x,y) = 
1
enddef;

save funkceg;
vardef funkceg (expr x,y) = 
1.5*(y**3)-((5.5*x)**4)
enddef;

%----------------------------<13>
unitlen := 1.0pt#;
xscale := 1200; yscale := 120;
bounds (0.2, 0.5, 0.5, 2);

beginmfpic(13); % line 230 in the TeX source. 
verbatimtex \bgroup \font \MFPcfont =ptmr8z\relax etex;

resizedrawpen (1pt);
setvariable (numeric) (label_sep) 1.0pt;
setvariable (numeric) (labelpath_sep) 1.0pt;
setvariable (color) (drawcolor) green;
krok:=0.01; pocet:=20;
x1:=0.2;y1:=1.4;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
krok:=0.2; pocet:=1;

resizedrawpen (2pt);
setvariable (color) (drawcolor) black;
x1:=0.2;y1:=1.4;for i=1 upto pocet: x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*funkceg(x1,y1);

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
setvariable (color) (drawcolor) rgb(0.5,0.5,0.5);
x1:=0.2;y1:=1.4;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*k2;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
setvariable (color) (drawcolor) rgb(1,0,0);
x1:=0.2;y1:=1.4;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
setvariable (numeric) (label_sep) 3.0pt;
setvariable (numeric) (labelpath_sep) 3.0pt;

resizedrawpen (1pt);
setvariable (color) (drawcolor) blue;
setvariable (color) (headcolor) blue;
for j=0.55 step 0.07 until 2:
for i:=0.2 step 0.012 until 0.5:
x1:=i; y1:=j; x3:=x1+(delka*funkcef(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); y3:=y1+(delka*funkceg(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 
setvariable (color) (drawcolor) rust;
setvariable (color) (headcolor) rust;

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
endfor;endfor;
setvariable (color) (drawcolor) black;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.l;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.b;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.r;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.t;

bmarks (4.0pt)
(0,0.2,0.3,0.4);

tmarks (4.0pt)
(0,0.2,0.3,0.4);

lmarks (4.0pt)
(0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2);
setvariable (color) (pointcolor) red;

pointd (4pt, true)
((0,1));

resizedrawpen (3pt);
delka:=0.3;
setvariable (color) (drawcolor) rgb(0,0.5,0.5);
setvariable (color) (headcolor) rgb(0,0.5,0.5);
x1:=0.2; y1:=1.4; x3:=x1+(delka*funkcef(0.2,1.4))/((funkcef(0.2,1.4)*xscale/100)++(funkceg(0.2,1.4)*yscale/100)); y3:=y1+(delka*funkceg(0.2,1.4))/((funkcef(0.2,1.4)*xscale/100)++(funkceg(0.2,1.4)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
setvariable (color) (drawcolor) rgb(0.5,0.5,0.5);
setvariable (color) (headcolor) rgb(0.5,0.5,0.5);
x1:=0.3; y1:=1.665; x3:=x1+(delka*funkcef(0.3,1.665))/((funkcef(0.3,1.665)*xscale/100)++(funkceg(0.3,1.665)*yscale/100)); y3:=y1+(delka*funkceg(0.3,1.665))/((funkcef(0.3,1.665)*xscale/100)++(funkceg(0.3,1.665)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
setvariable (color) (drawcolor) rgb(0,0.5,0);
setvariable (color) (headcolor) rgb(0,0.5,0);
x1:=0.3; y1:=1.3514; x3:=x1+(delka*funkcef(0.3,1.3514))/((funkcef(0.3,1.3514)*xscale/100)++(funkceg(0.3,1.3514)*yscale/100)); y3:=y1+(delka*funkceg(0.3,1.3514))/((funkcef(0.3,1.3514)*xscale/100)++(funkceg(0.3,1.3514)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
setvariable (color) (drawcolor) rgb(0,0.5,0.5);
setvariable (color) (headcolor) rgb(0,0.5,0.5);
x1:=0.4; y1:=0.658; x3:=x1+(delka*funkcef(0.4,0.658))/((funkcef(0.4,0.658)*xscale/100)++(funkceg(0.4,0.658)*yscale/100)); y3:=y1+(delka*funkceg(0.4,0.658))/((funkcef(0.4,0.658)*xscale/100)++(funkceg(0.4,0.658)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);

resizedrawpen (1.5pt);
setvariable (color) (drawcolor) rgb(0,0.5,0);
setvariable (color) (headcolor) rgb(0,0.5,0);

store (curpath)
DASHED (4.0pt,4.0pt)
polyline (false)
((0.2,1.4),(0.4,0.658));
setvariable (numeric) (label_sep) 2.0pt;
setvariable (numeric) (labelpath_sep) 2.0pt;

verbatimtex \egroup  etex;
endmfpic; % (13) line 292 in the TeX source.
%------------------------------------------

pr:=0.2;
delka:=0.2; krok:=0.2; pocet:=2;

save funkcef;
vardef funkcef (expr x,y) = 
1
enddef;

save funkceg;
vardef funkceg (expr x,y) = 
x+y**2
enddef;

%----------------------------<14>
unitlen := 1.0pt#;
xscale := 600; yscale := 200;
bounds (0, 0.5, 0.9, 1.8);

beginmfpic(14); % line 311 in the TeX source. 
verbatimtex \bgroup \font \MFPcfont =ptmr8z\relax etex;

resizedrawpen (1pt);
setvariable (numeric) (label_sep) 1.0pt;
setvariable (numeric) (labelpath_sep) 1.0pt;
krok:=0.02; pocet:=20;
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
krok:=0.2; pocet:=2;
setvariable (color) (drawcolor) black;
x1:=0;y1:=1;for i=1 upto pocet: x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*funkceg(x1,y1);

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*k2;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
setvariable (numeric) (label_sep) 3.0pt;
setvariable (numeric) (labelpath_sep) 3.0pt;

resizedrawpen (1pt);
setvariable (color) (drawcolor) blue;
setvariable (color) (headcolor) blue;
for j=0.9 step 0.1 until 1.8:
for i:=0 step 0.05 until 0.5:
x1:=i; y1:=j; x3:=x1+(delka*funkcef(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); y3:=y1+(delka*funkceg(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 
setvariable (color) (drawcolor) rust;
setvariable (color) (headcolor) rust;

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
endfor;endfor;
setvariable (color) (drawcolor) black;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.l;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.b;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.r;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.t;

bmarks (4.0pt)
(0,0.2,0.4);

tmarks (4.0pt)
(0,0.2,0.4);

lmarks (4.0pt)
(1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8);
setvariable (color) (pointcolor) red;

pointd (4pt, true)
((0,1));
setvariable (color) (drawcolor) red;
setvariable (color) (headcolor) red;
x1:=0; y1:=1; x3:=x1+(delka*funkcef(0,1))/((funkcef(0,1)*xscale/100)++(funkceg(0,1)*yscale/100)); y3:=y1+(delka*funkceg(0,1))/((funkcef(0,1)*xscale/100)++(funkceg(0,1)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
x1:=0.1; y1:=1.1; x3:=x1+(delka*funkcef(0.1,1.1))/((funkcef(0.1,1.1)*xscale/100)++(funkceg(0.1,1.1)*yscale/100)); y3:=y1+(delka*funkceg(0.1,1.1))/((funkcef(0.1,1.1)*xscale/100)++(funkceg(0.1,1.1)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
x1:=0.2; y1:=1.2; x3:=x1+(delka*funkcef(0.2,1.2))/((funkcef(0.2,1.2)*xscale/100)++(funkceg(0.2,1.2)*yscale/100)); y3:=y1+(delka*funkceg(0.2,1.2))/((funkcef(0.2,1.2)*xscale/100)++(funkceg(0.2,1.2)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
DASHED (4.0pt,4.0pt)
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);

verbatimtex \egroup  etex;
endmfpic; % (14) line 373 in the TeX source.
%------------------------------------------

pr:=0.2;
delka:=0.2; krok:=0.2; pocet:=2;

save funkcef;
vardef funkcef (expr x,y) = 
1
enddef;

save funkceg;
vardef funkceg (expr x,y) = 
x+y**3
enddef;

%----------------------------<15>
unitlen := 1.0pt#;
xscale := 600; yscale := 113;
bounds (0, 0.5, 0.9, 2.5);

beginmfpic(15); % line 395 in the TeX source. 
verbatimtex \bgroup \font \MFPcfont =ptmr8z\relax etex;

resizedrawpen (1pt);
setvariable (numeric) (label_sep) 1.0pt;
setvariable (numeric) (labelpath_sep) 1.0pt;
krok:=0.01; pocet:=39;
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
krok:=0.2; pocet:=2;
x1:=0;y1:=1;for i=1 upto pocet: x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*funkceg(x1,y1);

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*k2;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 
x1:=0;y1:=1;for i=1 upto pocet: k1:=funkceg(x1,y1); x3:=x1+(krok/2); y3:=y1+k1*(krok/2); k2:=funkceg(x3,y3); y4:=y1+k2*(krok/2); k3:=funkceg(x3,y4); y5:=y1+k3*(krok/2); k4:=funkceg(x3,y5); kk:=(k1+2*k2+2*k3+k4)/6; x2:=x1+krok*funkcef(x1,y1); y2:=y1+krok*kk;

store (curpath)
drawn
polyline (false)
(z1,z2);
 if y2>0: x1:=x2; y1:=y2 fi; endfor 

resizedrawpen (1pt);
setvariable (color) (drawcolor) blue;
setvariable (color) (headcolor) blue;
for j=0.9 step 0.1 until 2.4:
for i:=0 step 0.05 until 0.5:
x1:=i; y1:=j; x3:=x1+(delka*funkcef(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); y3:=y1+(delka*funkceg(i,j))/((funkcef(i,j)*xscale/100)++(funkceg(i,j)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 
setvariable (color) (drawcolor) rust;
setvariable (color) (headcolor) rust;

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
endfor;endfor;
setvariable (color) (drawcolor) black;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.l;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.b;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.r;

store (curpath)
headpath (0.0pt, 0, 0)
drawn
axisline.t;

bmarks (4.0pt)
(0,0.2,0.4);

tmarks (4.0pt)
(0,0.2,0.4);

lmarks (4.0pt)
(1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4);
setvariable (color) (pointcolor) red;

pointd (4pt, true)
((0,1));
setvariable (color) (drawcolor) red;
setvariable (color) (headcolor) red;
x1:=0; y1:=1; x3:=x1+(delka*funkcef(0,1))/((funkcef(0,1)*xscale/100)++(funkceg(0,1)*yscale/100)); y3:=y1+(delka*funkceg(0,1))/((funkcef(0,1)*xscale/100)++(funkceg(0,1)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
x1:=0.1; y1:=1.1; x3:=x1+(delka*funkcef(0.1,1.1))/((funkcef(0.1,1.1)*xscale/100)++(funkceg(0.1,1.1)*yscale/100)); y3:=y1+(delka*funkceg(0.1,1.1))/((funkcef(0.1,1.1)*xscale/100)++(funkceg(0.1,1.1)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
drawn
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);
x1:=0.2; y1:=1.2; x3:=x1+(delka*funkcef(0.2,1.2))/((funkcef(0.2,1.2)*xscale/100)++(funkceg(0.2,1.2)*yscale/100)); y3:=y1+(delka*funkceg(0.2,1.2))/((funkcef(0.2,1.2)*xscale/100)++(funkceg(0.2,1.2)*yscale/100)); if y3>y1:rust:=blue else: rust:=red fi; 

store (curpath)
DASHED (4.0pt,4.0pt)
headpath (3.0pt, 0, 0)
polyline (false)
(z1,z3);

verbatimtex \egroup  etex;
endmfpic; % (15) line 463 in the TeX source.
%------------------------------------------


end.
